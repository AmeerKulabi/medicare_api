name: CI Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test with coverage
      run: |
        dotnet test --no-build --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --logger trx \
          --verbosity normal \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.ExcludeByFile="**/Migrations/**"

    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Generate coverage report
      run: |
        reportgenerator \
          -reports:"./TestResults/*/coverage.opencover.xml" \
          -targetdir:"./CoverageReport" \
          -reporttypes:"Html;JsonSummary;Cobertura" \
          -filefilters:"-*/Migrations/*;-*/WeatherForecast.cs;-*/Program.cs"

    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(grep -o '"linecoverage":[0-9.]*' ./CoverageReport/Summary.json | grep -o '[0-9.]*')
        echo "Coverage: $COVERAGE%"
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        if (( $(echo "$COVERAGE < 60" | bc -l) )); then
          echo "Coverage $COVERAGE% is below the 60% threshold"
          exit 1
        fi

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./CoverageReport/Cobertura.xml
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/*.trx

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: CoverageReport/

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = "${{ steps.coverage.outputs.coverage }}";
          const comment = `## 📊 Code Coverage Report
          
          **Overall Coverage: ${coverage}%**
          
          ${coverage >= 60 ? '✅ Coverage meets the 60% threshold' : '❌ Coverage is below the 60% threshold'}
          
          📈 **Test Results Summary:**
          - Total Tests: Check the test results artifact
          - Covered Controllers: AuthController, DoctorsController, AvailabilityController, DoctorAppointmentsController, PatientAppointmentController, ProfileController
          - Test Types: Unit tests with positive/negative cases, authorization checks, validation tests, edge cases
          
          View the full coverage report in the artifacts.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run security analysis
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerable-packages.txt

        if grep -qE 'Severity:|Critical|High|Medium|Low' vulnerable-packages.txt; then
          echo "Vulnerable packages found!"
          cat vulnerable-packages.txt
          exit 1
        else
          echo "No vulnerable packages found."
        fi